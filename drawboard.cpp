#include<stdio.h>
#include<graphics.h>
#include<iostream>
#include "header.hpp"
#include<list>
#include<queue>

using namespace std;

extern pair<int,int> yellow_pcs[16];  // yellow_pcs are basically the red ones
extern pair<int,int> white_pcs[16];   // white_pcs are basically the black ones

extern struct Board                   // Board coordinate indicating structure
{
    pair<int,int> coord;
    queue< pair<int,int> > neighs;
    queue< pair<int,int> > lines;

} board[37];


extern bool TWO_PLAYER_MODE;
extern bool AI_MODE;



/*
    -drawBoard function is for drawing the board using "Lines" from graphics.h header
*/


void drawBoard()
{

    setbkcolor(WHITE);
    setcolor(BLACK);
    settextstyle(10,0,3);

    // Distribution of pieces


    if(TWO_PLAYER_MODE)
    {
        outtextxy(1100,150,"PLAYER 2 BLACK");
        outtextxy(1100,600,"PlAYER 1 RED");
        outtextxy(1100,800,"END GAME");
    }

    else
    {
        outtextxy(1100,150,"COMPUTER BLACK");
        outtextxy(1100,600,"PLAYER RED");
        outtextxy(1100,800,"END GAME");
    }


    setcolor(BLUE);


    //top triangle
    line(TRIANGLE_STARTING,SPACE_VERTICAL,TRIANGLE_ENDING,SPACE_VERTICAL);
    line(TRIANGLE_STARTING+TRIANGLE_BASE/4,SPACE_VERTICAL+TRIANGLE_HEIGHT/2,
         TRIANGLE_STARTING+3*TRIANGLE_BASE/4,SPACE_VERTICAL+TRIANGLE_HEIGHT/2);
    line(TRIANGLE_STARTING,SPACE_VERTICAL,BOX_STARTING+BOX_LENGTH/2,SPACE_VERTICAL+TRIANGLE_HEIGHT);
    line(TRIANGLE_ENDING,SPACE_VERTICAL,BOX_STARTING+BOX_LENGTH/2,SPACE_VERTICAL+TRIANGLE_HEIGHT);
    line(TRIANGLE_STARTING+TRIANGLE_BASE/2,SPACE_VERTICAL,TRIANGLE_STARTING+TRIANGLE_BASE/2,SPACE_VERTICAL+TRIANGLE_HEIGHT);


    //box
    line(BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT);
    line(BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH);
    line(BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH,
         BOX_STARTING+BOX_LENGTH,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH);
    line(BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH);


    //grid
    line(BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+PLACE_WIDTH,BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT+PLACE_WIDTH);
    line(BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+2*PLACE_WIDTH,BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT+2*PLACE_WIDTH);
    line(BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+3*PLACE_WIDTH,BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT+3*PLACE_WIDTH);

    line(BOX_STARTING+PLACE_WIDTH,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_STARTING+PLACE_WIDTH,SPACE_VERTICAL+BOX_LENGTH+TRIANGLE_HEIGHT);
    line(BOX_STARTING+2*PLACE_WIDTH,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_STARTING+2*PLACE_WIDTH,SPACE_VERTICAL+BOX_LENGTH+TRIANGLE_HEIGHT);
    line(BOX_STARTING+3*PLACE_WIDTH,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_STARTING+3*PLACE_WIDTH,SPACE_VERTICAL+BOX_LENGTH+TRIANGLE_HEIGHT);


    //diagonals
    line(BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH);
    line(BOX_STARTING+2*PLACE_WIDTH,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH-2*PLACE_WIDTH);
    line(BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+2*PLACE_WIDTH,BOX_ENDING-2*PLACE_WIDTH,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH);

    line(BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH);
    line(BOX_ENDING-2*PLACE_WIDTH,SPACE_VERTICAL+TRIANGLE_HEIGHT,BOX_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH-2*PLACE_WIDTH);
    line(BOX_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT+2*PLACE_WIDTH,BOX_STARTING+2*PLACE_WIDTH,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH);



    //bottom triangle
    line(TRIANGLE_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH+TRIANGLE_HEIGHT,
         TRIANGLE_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH+TRIANGLE_HEIGHT);
    line(TRIANGLE_STARTING+TRIANGLE_BASE/4,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH+TRIANGLE_HEIGHT/2,
         TRIANGLE_STARTING+3*TRIANGLE_BASE/4,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH+TRIANGLE_HEIGHT/2);
    line(TRIANGLE_STARTING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH+TRIANGLE_HEIGHT,
         BOX_STARTING+BOX_LENGTH/2,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH);
    line(TRIANGLE_ENDING,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH+TRIANGLE_HEIGHT,
         BOX_STARTING+BOX_LENGTH/2,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH);
    line(TRIANGLE_STARTING+TRIANGLE_BASE/2,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH,
         TRIANGLE_STARTING+TRIANGLE_BASE/2,SPACE_VERTICAL+TRIANGLE_HEIGHT+BOX_LENGTH+TRIANGLE_HEIGHT);





    // Placing the pieces

    for(int i = 0 ; i < 16 ; i++)
    {
        //printf("%d %d\n",white_pcs[i].first,white_pcs[i].second);
        setcolor(BLACK);
        placePieces(white_pcs[i].first,white_pcs[i].second);

        setcolor(RED);
        placePieces(yellow_pcs[i].first,yellow_pcs[i].second);
    }



    setcolor(BLUE);

    for(int i = 0 ; i < 37 ; i++)
    {
        circle(board[i].coord.first,board[i].coord.second,5);
    }



}
